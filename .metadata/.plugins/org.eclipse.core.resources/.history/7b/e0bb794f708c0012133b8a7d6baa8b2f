package com.game.keepopen;

import java.io.IOException;

import org.apache.http.client.ClientProtocolException;

import com.data.DataClass;
import com.data.MyHttpClient;
import com.vectorone.MenuActivity;
import com.vectorone.PlaygroundActivity;
import com.vectorone.R;
import android.app.Activity;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.graphics.Color;
import android.graphics.Typeface;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.widget.CheckBox;
import android.widget.TextView;
import android.widget.Toast;

public class Game_keepopen_Activity extends Activity {

	private int numberoflights = 24;
	private CheckBox[] lights = new CheckBox[numberoflights];
	private boolean hardcore = false;
	private Game_KeepOpen_Time gametime;
	// private MediaPlayer mp;
	private TextView t1;
	private int cacheid;
	private boolean withpoints;
	private boolean finished = false;
	private int cachevalue;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
		setContentView(R.layout.activity_keepopen_game);
		Intent intent = getIntent();
		cachevalue=intent.getIntExtra("value", 0);
		t1 = (TextView) findViewById(R.id.time);
		Typeface font = Typeface
				.createFromAsset(getAssets(), "fonts/bebas.ttf");
		int textcolor = Color.parseColor("#45250F");
		t1.setTextColor(textcolor);
		t1.setTypeface(font);
		t1.setTextSize(22);
		withpoints = intent.getBooleanExtra("withpoints", true);
		cacheid = intent.getIntExtra("cacheid", -1);
		// PlaySound();
		for (int i = 0; i < numberoflights; i++) {
			lights[i] = (CheckBox) findViewById(getid("light" + (i + 1)));
			lights[i].setButtonDrawable(R.drawable.checkbox_keepopen_game);
			lights[i].setChecked(true);
		}
		setHardcodeListener(hardcore);
		gametime = new Game_KeepOpen_Time(120000, 100, lights, t1, this);

		starttimer.start();

	}

	private int getid(String name) {
		if (name.equals("light1")) {
			return R.id.light1;
		}
		if (name.equals("light2")) {
			return R.id.light2;
		}
		if (name.equals("light3")) {
			return R.id.light3;
		}
		if (name.equals("light4")) {
			return R.id.light4;
		}
		if (name.equals("light5")) {
			return R.id.light5;
		}
		if (name.equals("light6")) {
			return R.id.light6;
		}
		if (name.equals("light7")) {
			return R.id.light7;
		}
		if (name.equals("light8")) {
			return R.id.light8;
		}
		if (name.equals("light9")) {
			return R.id.light9;
		}
		if (name.equals("light10")) {
			return R.id.light10;
		}
		if (name.equals("light11")) {
			return R.id.light11;
		}
		if (name.equals("light12")) {
			return R.id.light12;
		}
		if (name.equals("light13")) {
			return R.id.light13;
		}
		if (name.equals("light14")) {
			return R.id.light14;
		}
		if (name.equals("light15")) {
			return R.id.light15;
		}
		if (name.equals("light16")) {
			return R.id.light16;
		}
		if (name.equals("light17")) {
			return R.id.light17;
		}
		if (name.equals("light18")) {
			return R.id.light18;
		}
		if (name.equals("light19")) {
			return R.id.light19;
		}
		if (name.equals("light20")) {
			return R.id.light20;
		}
		if (name.equals("light21")) {
			return R.id.light21;
		}
		if (name.equals("light22")) {
			return R.id.light22;
		}
		if (name.equals("light23")) {
			return R.id.light23;
		}
		if (name.equals("light24")) {
			return R.id.light24;
		}
		return 0;

	}

	/*
	 * private void PlaySound() { new Thread() { public void run() { mp =
	 * MediaPlayer.create(getApplicationContext(), R.raw.gamesound); mp.start();
	 * } }.start(); }
	 */

	public void stop(long time) {
		// mp.stop();
		calculatepoints(time);
	}

	private void calculatepoints(long time) {
		if (!finished) {
			if (withpoints) {
				time=time+cachevalue;
				Toast.makeText(getBaseContext(), "Points:" + time,
						Toast.LENGTH_SHORT).show();
				MyHttpClient http = new MyHttpClient(DataClass.server);
				try {
					http.pointsupdate(DataClass.user.getUsername(), (int) time);
				} catch (ClientProtocolException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				}

				String msg = DataClass.user.getUsername()
						+ " has scored in KeepOpen: " + time;
				DataClass.addtolog(" has scored in KeepOpen: " + time);
				MyHttpClient client = new MyHttpClient(DataClass.server);
				try {
					client.pushTWITTER(DataClass.user.getUsername(), msg);
				} catch (ClientProtocolException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				DataClass.user.setCurrentPoints((int) (DataClass.user
						.getCurrentPoints() + time));
				DataClass.user.setTotalpoints((int) (DataClass.user
						.getTotalpoints() + time));
				finish();
				startActivity(new Intent(getBaseContext(), MenuActivity.class));
			} else {
				Toast.makeText(getBaseContext(),
						"Time:" + time + "good try but just training",
						Toast.LENGTH_SHORT).show();
				finish();
				startActivity(new Intent(getBaseContext(),
						PlaygroundActivity.class));
			}
		}
	}

	@Override
	public void onBackPressed() {
		// if (mp.isPlaying()) {
		// mp.stop();
		// }
		finished = true;
		Toast.makeText(getBaseContext(), "Abort! no points!", Toast.LENGTH_SHORT).show();
		if (withpoints) {
			finish();
			startActivity(new Intent(getBaseContext(), MenuActivity.class));
		} else {
			finish();
			startActivity(new Intent(getBaseContext(), PlaygroundActivity.class));
		}
	};

	public void setHardcodeListener(boolean hardcore) {
		if (hardcore) {
			for (int i = 0; i < lights.length; i++) {
				lights[i].setOnClickListener(new OnClickListener() {

					@Override
					public void onClick(View v) {
						for (int k = 0; k < lights.length; k++)
							if (lights[k].isChecked() && v == lights[k]) {
								lights[k].setChecked(false);
							}
					}
				});
			}
		}
	}

	public CountDownTimer starttimer = new CountDownTimer(4000, 10) {

		@Override
		public void onTick(long millisUntilFinished) {
			t1.setText("Time until KeepOpen Starts:"
					+ (millisUntilFinished / 1000) + "s");
			
		}

		@Override
		public void onFinish() {
			gametime.start();
		}
	};
}
