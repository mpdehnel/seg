package com.vectorone;

import java.io.IOException;

import com.vectorone.OverlaySurfaceView.OverlayThread;

import android.app.Activity;
import android.content.Context;
import android.hardware.Camera;
import android.os.Bundle;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.Window;
import android.view.ViewGroup.LayoutParams;

public class CamActivity extends Activity {

  Preview mPreview;

  OverlaySurfaceView mOverlaySurfaceView;
  OverlayThread mOverlayThread;

  /** Called when the activity is first created. */
  @Override
  public void onCreate(Bundle savedInstanceState) {
      super.onCreate(savedInstanceState);
      // Hide the window title.
      requestWindowFeature(Window.FEATURE_NO_TITLE);
    
      mPreview = new Preview(this);
      //mDraw = new DrawOnTop(this);
      mOverlaySurfaceView = new OverlaySurfaceView(this);
     
      mOverlayThread = mOverlaySurfaceView.getThread();
    
      setContentView(mOverlaySurfaceView);
      addContentView(mPreview, new LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));

      mOverlaySurfaceView.bringToFront(); // commenting this makes the camera //preview to disapear and only the oierlay to be shown wihtout teh color //backgroudn indicating that the thread is working
//on the otehr hand when it is uncommented as it is now, teh camera preview is //shown but the transparent red backgroudn og teh OverlaySurfaceView is seen //(meaing that the thread is not running
  }
}

class Preview extends SurfaceView implements SurfaceHolder.Callback {
  SurfaceHolder mHolder;
  Camera mCamera;

  Preview(Context context) {
      super(context);
    
      // Install a SurfaceHolder.Callback so we get notified when the
      // underlying surface is created and destroyed.
      mHolder = getHolder();
      mHolder.addCallback(this);
      mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
  }

  public void surfaceCreated(SurfaceHolder holder) {
      // The Surface has been created, acquire the camera and tell it where
      // to draw.
      mCamera = Camera.open();
      try {
         mCamera.setPreviewDisplay(holder);
      } catch (IOException exception) {
          mCamera.release();
          mCamera = null;
          // TODO: add more exception handling logic here
      }
  }

  public void surfaceDestroyed(SurfaceHolder holder) {
      // Surface will be destroyed when we return, so stop the preview.
      // Because the CameraDevice object is not a shared resource, it's very
      // important to release it when the activity is paused.
      mCamera.stopPreview();
      mCamera = null;
  }

  public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {
      // Now that the size is known, set up the camera parameters and begin
      // the preview.
      Camera.Parameters parameters = mCamera.getParameters();
      parameters.setPreviewSize(w, h);
      mCamera.setParameters(parameters);
      mCamera.startPreview();
  }

}