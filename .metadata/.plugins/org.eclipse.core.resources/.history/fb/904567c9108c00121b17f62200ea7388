package com.findCache;

import java.io.IOException;
import java.util.List;

import org.apache.http.client.ClientProtocolException;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.graphics.Color;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.os.Vibrator;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.Window;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.TextView;
import android.widget.Toast;
import com.data.Cache;
import com.data.DataClass;
import com.data.MyHttpClient;
import com.data.SegMathClass;
import com.game.keepopen.Game_keepopen_Activity;
import com.game.memory.Game_memory_Activity;
import com.google.android.maps.GeoPoint;
import com.google.android.maps.MapActivity;
import com.google.android.maps.MapController;
import com.google.android.maps.MapView;
import com.google.android.maps.Overlay;
import com.google.android.maps.OverlayItem;
import com.maps.route.GoogleParser;
import com.maps.route.Parser;
import com.maps.route.Route;
import com.maps.route.RouteOverlay;
import com.vectorone.AddCacheActivity;
import com.vectorone.MenuActivity;
import com.vectorone.R;

@SuppressLint("ShowToast")
public class MapsActivity extends MapActivity implements LocationListener {

	private MapView mapView;
	private LocationManager locationManager;
	private String provider;
	private RouteOverlay routeOverlay;
	private Location location;
	private MapController mc;
	private List<Overlay> mapOverlays;
	private Button zoomin;
	private Button zoomout;
	private Button setNewCache;
	private TextView scale;
	private Button refresh_button;
	private CheckBox satelitenmode;
	private Vibrator vibrator;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.activity_maps);
		mapView = (MapView) findViewById(R.id.map_view);
		mapView.setSatellite(false);
		mapOverlays = mapView.getOverlays();

		removeallOverlaysandaddnew();
		mc = mapView.getController();
		scale = (TextView) findViewById(R.id.scale);
		scale.setText("|_______|");
		mapView.setOnTouchListener(new OnTouchListener() {

			@Override
			public boolean onTouch(View v, MotionEvent event) {
				retextScale(mapView.getZoomLevel());
				if (event.getPointerCount() > 1) {
					return true;
				}
				return false;
			}
		});

		locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
		provider = LocationManager.GPS_PROVIDER;
		location = locationManager.getLastKnownLocation(provider);
		if (location != null) {
			onLocationChanged(location);
			mc.setZoom(15);
		} else {
			DataClass.mylng = (int) (54 * Math.pow(10, 6));
			DataClass.mylat = (int) (-1 * Math.pow(10, 6));

			mc.animateTo(new GeoPoint(DataClass.mylat, DataClass.mylng));
			mc.setZoom(15);

		}

		initbuttons();
		handellistener();
		setupButtons();

	}

	private void initbuttons() {
		setNewCache = (Button) findViewById(R.id.setMyPositionasNewCacheButto);
		refresh_button = (Button) findViewById(R.id.refreshbutton);
		zoomin = (Button) findViewById(R.id.ZoomIn);
		zoomout = (Button) findViewById(R.id.ZoomOut);
		satelitenmode = (CheckBox) findViewById(R.id.Satelitenmode);
		vibrator = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);
	}

	private void handellistener() {
		setNewCache.setOnClickListener(clickhandler);
		refresh_button.setOnClickListener(clickhandler);
		zoomin.setOnClickListener(clickhandler);
		zoomout.setOnClickListener(clickhandler);
		satelitenmode.setOnClickListener(clickhandler);
	}

	private void setupButtons() {
		Typeface font = Typeface
				.createFromAsset(getAssets(), "fonts/bebas.ttf");
		float textsize = 22;
		Drawable buttonimage = getResources().getDrawable(
				R.drawable.buttonmedium);
		Drawable zoombuttonimage = getResources().getDrawable(
				R.drawable.buttonsmall);
		int buttontextcolor = Color.parseColor("#45250F");

		setNewCache.setBackgroundDrawable(buttonimage);
		setNewCache.setTypeface(font);
		setNewCache.setTextColor(buttontextcolor);
		setNewCache.setTextSize(textsize);

		refresh_button.setBackgroundDrawable(buttonimage);
		refresh_button.setTypeface(font);
		refresh_button.setTextColor(buttontextcolor);
		refresh_button.setTextSize(textsize);

		zoomin.setBackgroundDrawable(zoombuttonimage);
		zoomin.setTypeface(font);
		zoomin.setTextColor(buttontextcolor);
		zoomin.setTextSize(textsize);

		zoomout.setBackgroundDrawable(zoombuttonimage);
		zoomout.setTypeface(font);
		zoomout.setTextColor(buttontextcolor);
		zoomout.setTextSize(textsize);

		satelitenmode.setButtonDrawable(getResources().getDrawable(
				R.drawable.checkbox_satelitemode));

	}

	private void removeallOverlaysandaddnew() {

		for (int i = 0; i < mapOverlays.size(); i++)
			mapOverlays.remove(i);
		for (int i = 0; i < DataClass.selectedCaches.size(); i++) {
			// map points;

			String teamColour = DataClass.selectedCaches.get(i).getTeamcolour();
			int image;
			if (DataClass.selectedCaches.get(i).isFound()) {
				image = R.drawable.treasureopen;// point image;
			} else {
				if (teamColour.equals("Red Reefers")) {
					image = R.drawable.crossred;
				} else if (teamColour.equals("Green Gulls")) {
					image = R.drawable.crossgreen;
				} else if (teamColour.equals("Blue Bandits")) {
					image = R.drawable.crossblue;
				} else if (teamColour.equals("Purple Perils")) {
					image = R.drawable.crosspurple;
				} else {
					image = R.drawable.treasureclosed;
				}

			}
			GeoPoint gp = DataClass.selectedCaches.get(i).getGeopoint();
			String name = DataClass.selectedCaches.get(i).getName();
			String description = DataClass.selectedCaches.get(i)
					.getDescripton();

			addOverlay(image, gp, name, description);
		}
		String teamColour = DataClass.user.getTeam();
		int image;
		if (teamColour.equals("Red Reefers")) {
			image = R.drawable.flagred;
		} else if (teamColour.equals("Green Gulls")) {
			image = R.drawable.flaggreen;
		} else if (teamColour.equals("Blue Bandits")) {
			image = R.drawable.flagblue;
		} else if (teamColour.equals("Purple Perils")) {
			image = R.drawable.flagred;
		} else {
			image = R.drawable.treasureclosed;
		}

		addOverlay(image, new GeoPoint(DataClass.mylat, DataClass.mylng), "Hi",
				"Here i am!");
		if (routeOverlay != null) {
			mapView.getOverlays().add(routeOverlay);
			mapView.invalidate();
		}
	}

	@Override
	protected boolean isRouteDisplayed() {
		// TODO Auto-generated method stub
		return false;
	}

	private void retextScale(int zoomLevel) {
		String space = "__________";
		int distance = 0;
		double calcdistance = (40075.017 / 256.0) * 110
				/ Math.pow(2, zoomLevel - 1);
		if (calcdistance > 50) {
			distance = (int) calcdistance;
			scale.setText("|" + space + "|" + distance + "km");
		} else {
			distance = (int) (calcdistance * 1000);
			scale.setText("|" + space + "|" + distance + "m");
		}

	}

	public void addOverlay(int id_image, GeoPoint where, String topic,
			String discription) {
		Drawable drawable = this.getResources().getDrawable(id_image);
		ItemOverlay itemizedoverlay = new ItemOverlay(drawable, this);
		OverlayItem overlayitem = new OverlayItem(where, topic, discription);

		itemizedoverlay.addOverlay(overlayitem);
		mapOverlays.add(itemizedoverlay);
	}

	@Override
	public void onLocationChanged(Location location) {
		DataClass.mylat = (int) (location.getLatitude() * Math.pow(10, 6));
		DataClass.mylng = (int) (location.getLongitude() * Math.pow(10, 6));
		DataClass.setMyGeoPoint();

		mc.animateTo(DataClass.getMyGeoPoint());
		removeallOverlaysandaddnew();
		check_If_I_Found_a_Cache();
	}

	private void check_If_I_Found_a_Cache() {
		for (int i = 0; i < DataClass.selectedCaches.size(); i++) {
			Cache thiscache = DataClass.selectedCaches.get(i);
			if (thiscache.isIslessthanXXXm(20) && thiscache.isFound()
					&& thiscache.getMacAdd().equals("")) {
				thiscache.setfounded(true);
				playSound();
				DataClass.log.append("Cache found:" + thiscache.getName());
				String msg = DataClass.user.getUsername()
						+ " has just visited cache:" + thiscache.getName();

				MyHttpClient client = new MyHttpClient(DataClass.server);
				try {
					client.pushTWITTER(DataClass.user.getUsername(), msg);
					client.updateCache(DataClass.user.getUsername(),
							thiscache.get_id());
				} catch (ClientProtocolException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				int choice = (int) (Math.random() * 2);

				if (choice == 0) {
					DataClass.log.append("Game: KeepOpen");
					Intent intent = new Intent(getApplicationContext(),
							Game_keepopen_Activity.class);
					startActivity(intent);
				} else {
					DataClass.log.append("Game: Memory");
					Intent intent = new Intent(getApplicationContext(),
							Game_memory_Activity.class);
					startActivity(intent);
				}

			}
		}
	}

	private void playSound() {
		new Thread() {
			public void run() {
				MediaPlayer mp = MediaPlayer.create(getApplicationContext(),
						R.raw.bossdeath);
				mp.start();
			}
		}.start();

	}

	@Override
	public void onProviderEnabled(String provider) {
		Toast.makeText(this, "Enabled new provider " + provider,
				Toast.LENGTH_SHORT).show();

	}

	@Override
	public void onProviderDisabled(String provider) {
		Toast.makeText(this, "Disabled provider " + provider,
				Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onStatusChanged(String provider, int status, Bundle extras) {
		// TODO Auto-generated method stub

	}

	/* Request updates at startup */
	protected void onResume() {
		super.onResume();
		locationManager.requestLocationUpdates(provider, 500, 1, this);
	}

	/* Remove the locationListener updates when Activity is paused */
	protected void onPause() {
		super.onPause();
		locationManager.removeUpdates(this);
	}

	@Override
	public void onBackPressed() {
		finish();
		Intent intent = new Intent(getBaseContext(), MenuActivity.class);
		startActivity(intent);
	}

	// //////////////////////////////////////////////////////////////////
	// //////////////////////////////////////////////////////////////////

	private Route directions(final GeoPoint start, final GeoPoint dest) {
		if (SegMathClass.calculateDistanceinMeter(start, dest) < 10000) {
			Parser parser;
			// https://developers.google.com/maps/documentation/directions/#JSON
			// <-
			// get api
			String jsonURL = "http://maps.googleapis.com/maps/api/directions/json?";
			final StringBuffer sBuf = new StringBuffer(jsonURL);
			sBuf.append("origin=");

			sBuf.append(((double) start.getLatitudeE6()) / 1E6);
			sBuf.append(",");
			sBuf.append(((double) start.getLongitudeE6()) / 1E6);
			sBuf.append("&destination=");
			sBuf.append(((double) dest.getLatitudeE6()) / 1E6);
			sBuf.append(",");
			sBuf.append(((double) dest.getLongitudeE6()) / 1E6);
			sBuf.append("&sensor=false&avoid=highways&mode=bicycling");
			Log.i("MAP", sBuf.toString());
			parser = new GoogleParser(sBuf.toString());
			Route r = parser.parse();
			if (r == null) {
				Toast.makeText(getApplicationContext(),
						"Sry no path between you and the Cache",
						Toast.LENGTH_LONG).show();
			}
			return r;
		} else {
			Toast.makeText(getApplicationContext(),
					"Get colser to the Cache to use this funktion",
					Toast.LENGTH_LONG).show();
			return null;
		}

	}

	private OnClickListener clickhandler = new OnClickListener() {

		@Override
		public void onClick(View v) {
			vibrator.vibrate(50);
			if (v == setNewCache) {
				finish();
				Intent intent = new Intent(getApplicationContext(),
						AddCacheActivity.class);
				intent.putExtra("fromMaps", true);
				startActivity(intent);

			}
			if (v == refresh_button) {
				removeallOverlaysandaddnew();
				GeoPoint routing = DataClass.routingpoint;
				if (routing != null) {
					Route route = directions(DataClass.getMyGeoPoint(), routing);
					if (route != null) {
						routeOverlay = new RouteOverlay(route, Color.BLUE);
						removeallOverlaysandaddnew();
					}

				} else {
					Toast.makeText(getApplicationContext(),
							"You haven't select a cach for Routing",
							Toast.LENGTH_SHORT).show();
				}

			}
			if (v == zoomin && mapView.getZoomLevel() < 17) {
				Log.i("MAP", mapView.getZoomLevel() + "asd");
				zoomout.setBackgroundDrawable(getResources().getDrawable(
						R.drawable.buttonsmall));
				mc.zoomIn();
				retextScale(mapView.getZoomLevel());
				if (mapView.getZoomLevel() == 17) {
					zoomin.setBackgroundDrawable(getResources().getDrawable(
							R.drawable.buttonsmallgrey));
					zoomin.setEnabled(false);
				}
			}
			if (v == zoomout) {
				mc.zoomOut();
				retextScale(mapView.getZoomLevel());
				zoomin.setBackgroundDrawable(getResources().getDrawable(
						R.drawable.buttonsmall));
				zoomin.setEnabled(true);
				Log.i("MAP", mapView.getZoomLevel() + "asd");
				if (mapView.getZoomLevel() == 1) {
					zoomout.setBackgroundDrawable(getResources().getDrawable(
							R.drawable.buttonsmallgrey));
				}
			}
			if (v == satelitenmode) {
				mapView.setSatellite(satelitenmode.isChecked());
			}
		}
	};
}